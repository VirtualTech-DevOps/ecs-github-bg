on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - app/*
      - .github/workflows/actions.yaml

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: repository
        run: echo "name=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"
        shell: bash
      - id: commit-hash
        run: echo "short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_OUTPUT"
        shell: bash
      - uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: |
            ghcr.io/${{ steps.repository.outputs.name }}:latest
            ghcr.io/${{ steps.repository.outputs.name }}:${{ steps.commit-hash.outputs.short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: image
        run: echo "name=ghcr.io/${{ steps.repository.outputs.name }}:${{ steps.commit-hash.outputs.short }}" >> "$GITHUB_OUTPUT"
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.role_to_assume }}
          aws-region: ${{ secrets.aws_region }}
      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: taskdef
        with:
          task-definition: ./app/taskdef.json
          container-name: hello
          image: ${{ steps.image.outputs.name }}
      - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          cluster: ${{ secrets.ecs_cluster }}
          service: ${{ secrets.ecs_service }}
          wait-for-service-stability: true
          codedeploy-appspec: ./app/appspec.yaml
          codedeploy-application: ${{ secrets.codedeploy_application }}
          codedeploy-deployment-group: ${{ secrets.codedeploy_deployment_group }}
